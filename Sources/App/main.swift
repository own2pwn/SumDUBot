import Vapor
import VaporPostgreSQL

/// Bot errors
enum BotError: Swift.Error {
    /// Missing secret key in Config/secrets/app.json.
    case missingSecretKey
}

/// Droplet
let drop = Droplet()

/// Read the secret key from Config/secrets/app.json.
guard let secret = drop.config["app", "secret"]?.string else {
    // Show errors in console.
    drop.console.error("Missing secret key!")
    drop.console.warning("Add one in Config/secrets/app.json")

    // Throw missing secret key error.
    throw BotError.missingSecretKey
}

// Providers
try drop.addProvider(VaporPostgreSQL.Provider.self)

// Preparations
drop.preparations += Object.self
drop.preparations += ScheduleRecord.self

// Database
Object.database = drop.database
ScheduleRecord.database = drop.database

// Commands
drop.commands.append(ImportCommand(console: drop.console, droplet: drop))

drop.get("") { request in
    return "SumDUBot"
}

// Setting up the POST request with the secret key.
// With a secret path to be sure that nobody else knows that URL.
// https://core.telegram.org/bots/api#setwebhook
drop.post(secret) { request in
    /// Let's prepare the response message text.
    var response = ""

    /// Chat ID from request JSON.
    let chatID = request.data["message", "chat", "id"]?.int ?? 0
    /// Message text from request JSON.
    let message = request.data["message", "text"]?.string ?? ""
    /// User first name from request JSON.
    var userFirstName = request.data["message", "from", "first_name"]?.string ?? ""

    // Check if the message is empty
    guard !message.characters.isEmpty else {
        return try JSON(node: [])
    }

    // Check if the message is a Telegram command.
    if message.hasPrefix("/") {
        let newLine = "\n\n"

        // Check what type of command is.
        switch message {
        // Start command "/start".
        case "/start", "/start start":
            // Set the response message text.
            response = "–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç —Ä–æ–∑–∫–ª–∞–¥—É –°—É–º–î–£! üòú" + newLine +
                "–£–≤–∞–≥–∞, –±–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏, —Ç–æ–º—É –¥–µ—è–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!" + newLine +
                "–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏ - @voevodin_yura" + newLine +
                "–í–∏ –º–æ–∂–µ—Ç–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏, –∞—É–¥–∏—Ç–æ—Ä—ñ—î—é –∞–±–æ —Ñ–∞–º—ñ–ª—ñ—î—é –≤–∏–∫–ª–∞–¥–∞—á–∞." + newLine +
            "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help"

        // Help command "/help".
        case "/help":
            // Set the response message text.
            response = "–£–≤–∞–≥–∞, –±–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Å—Ç–∞–¥—ñ—ó —Ä–æ–∑—Ä–æ–±–∫–∏, —Ç–æ–º—É –¥–µ—è–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!" + newLine +
                "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏" + "\n" +
                "/help - –î–æ–ø–æ–º–æ–≥–∞" + newLine +
            "–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏ - @voevodin_yura"
        // Command not valid.
        default:
            return try JSON(node: [])
        }
        // It isn't a Telegram command.
    } else {
        // Set the response message text.
        response = "–í–∏–±–∞—á—Ç–µ, –ø–æ—à—É–∫ –ø–æ–∫–∏ —â–æ –Ω–µ –ø—Ä–∞—Ü—é—î" + "\n" +
        "–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º –ø–∏—à—ñ—Ç—å —Å—é–¥–∏ - @voevodin_yura"
    }

    // Create the JSON response.
    // https://core.telegram.org/bots/api#sendmessage
    return try JSON(node:
        [
            "method": "sendMessage",
            "chat_id": chatID,
            "text": response
        ]
    )
}

// Run droplet
drop.run()
